/**
 * ThoughtFarmer FormFlow API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="jquery" />
import * as models from '../model/models';
import { Configuration } from '../configuration';
export declare class ApiFormApi {
    protected basePath: string;
    defaultHeaders: Array<string>;
    defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings;
    configuration: Configuration;
    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings);
    private extendObj;
    /**
     *
     * @summary Returns all the Form entry IDs for a specific form
     * @param formId
     */
    publicFormFormIdEntryidsGet(formId: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: Array<number>;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * Fields and sections that the user does not have permission to see will not be returned.    Submitting data is only possible on FormSections marked with `CanEdit = true`.    All permissions are dependent on if they are a Viewer, Submitter, or a Reviewer.        **NOTE**: A reviewer may have a very different set of permissions for sections and fields for a specific form due to adhoc reviewers, manager reviewers, etc...    To get the form schema in that context use the optional query string parameter formEntryId.
     * @summary Gets the schema and all meta data for a form.
     * @param formId The id for the form you want to get.
     * @param formEntryId Optionally include a formEntryId to get the schema for a specific form. If the user is a reviewer, sections and fields they have view and edit access to may change.
     * @param includeDeleted Optional boolean to indicate if deleted fields and sections should be included in the schema. This is useful for displaying older form entries that may contain since deleted fields and sections.
     */
    publicFormFormIdGet(formId: number, formEntryId?: number, includeDeleted?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiForm;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * File should be a supported *.formdata file exported from another ThoughtFarmer instance.
     * @summary Imports a form based on an uploaded file.
     * @param launchOnImport If true, then the imported form will be set to launch immediately. By default it will remain in draft mode until launched manually.
     */
    publicFormImportPost(launchOnImport?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.FormUploadResponse;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
}
