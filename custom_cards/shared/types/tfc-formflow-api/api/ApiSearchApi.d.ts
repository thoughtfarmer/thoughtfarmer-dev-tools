/**
 * ThoughtFarmer FormFlow API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="jquery" />
import * as models from '../model/models';
import { Configuration } from '../configuration';
export declare class ApiSearchApi {
    protected basePath: string;
    defaultHeaders: Array<string>;
    defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings;
    configuration: Configuration;
    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings);
    private extendObj;
    /**
     * Along with the query search parameters listed here, it is also possible to search by specific fields and their values. As well, date time ranges must all be in a specific format.    Please see our [Documentation](https://helpdesk.thoughtfarmer.com/) for details. Search for \"FormFlow API search\".
     * @summary Search for form entries based on query string parameters.
     * @param query A text based query for searching all data associated with a form. This includes searching against all meta-data (e.g. status, state) and all form field data. Stemming is not supported. Wildcards are supported (e.g. use box* to find box, boxes, boxing)
     * @param pageNumber Used for the paged response. Indicates the starting page of the returned data. If not set uses the default 1 for first page.
     * @param pageSize Used for the paged response. Indicates how many items to return. Default is based on the site configuration setting Api Page Size.
     * @param form The form ID if you wish to only search for entries tied to a specific form.
     * @param archived A boolean to indicate if ONLY archived entries should be returned.
     * @param overdue boolean to indicate if ONLY overdue entries should be returned.
     * @param status Used to filter by status. Can be \&#39;open\&#39;, \&#39;closed\&#39; or \&#39;all\&#39;. If empty, \&#39;open\&#39; is used.
     * @param statusId For a specific custom status tied to a form. This value can be found from getting the schema for a form via /formsapi/public/form/{formId}
     * @param sortDirection Order for sorted results. Can be \&#39;asc\&#39; or \&#39;desc\&#39; for ascending or descending.
     * @param sortOn The name of the field to sort on. Supported values are (duedate, submitteddate, title, state, assignee, submitter, entrynumber) all lower case. Also supports an integer corresponding to a field Id for a specific form (e.g. sortOn&#x3D;123)
     * @param sortRandom Sorted results are completely randomized.
     * @param sortSeed To support paging you can specify the seed so that the results are randomized the same way across all pages.
     * @param title This is a query for the title of the form entry in the user\&#39;s default language.
     * @param state This is a query for the state of the form entry.
     * @param assignee An array of user IDs to filter for entries assigned to specific users.
     * @param submitter An array of user IDs to filter for entries submitted by specific users.
     * @param dueDate A string to search for form entries due at a specific time using the supported format (e.g. 2021-04-21, after2021-04-21, before2021-04-21, 2021-04-01to2021-04-30).
     * @param dateSubmitted A string to search for form entries submitted at a specific time using the supported format (e.g. 2021-04-21, after2021-04-21, before2021-04-21, 2021-04-01to2021-04-30).
     */
    publicSearchEntriesGet(query?: string, pageNumber?: number, pageSize?: number, form?: number, archived?: boolean, overdue?: boolean, status?: string, statusId?: number, sortDirection?: string, sortOn?: string, sortRandom?: boolean, sortSeed?: number, title?: string, state?: string, assignee?: Array<number>, submitter?: Array<number>, dueDate?: string, dateSubmitted?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiFormEntryPagedItems;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
}
