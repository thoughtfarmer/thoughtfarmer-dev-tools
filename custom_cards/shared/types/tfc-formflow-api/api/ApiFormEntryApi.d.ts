/**
 * ThoughtFarmer FormFlow API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="jquery" />
import * as models from '../model/models';
import { Configuration } from '../configuration';
export declare class ApiFormEntryApi {
    protected basePath: string;
    defaultHeaders: Array<string>;
    defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings;
    configuration: Configuration;
    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings);
    private extendObj;
    /**
     * Partial content may be returned if not all entryIds passed in are viewable or otherwise available.
     * @summary Gets multiple form entries. Use this endpoint for large batches.
     * @param includeDeleted Set to true to return even if the form entries have been deleted.
     * @param apiEntriesGetRequest The request object to fetch the entries.
     */
    publicFormentriesPost(includeDeleted?: boolean, apiEntriesGetRequest?: models.ApiEntriesGetRequest, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: Array<models.ApiFormEntry>;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     *
     * @summary Cancels a lock on a form entry. Will also clean out scratch pad items for a valid scratchpadId.
     * @param entryId Id of the entry to update
     * @param entryLockId The entry lock ID you want to cancel.
     * @param scratchpadId Optional. If sent, it will delete all associated scratch pad files.
     */
    publicFormentryEntryIdCanceleditEntryLockIdPost(entryId: number, entryLockId: number, scratchpadId?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body?: any;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     *
     * @summary Gets a specific form entry.
     * @param entryId Id of the form entry.
     * @param includeDeleted Set to true to return even if the form entry has been deleted.
     */
    publicFormentryEntryIdGet(entryId: number, includeDeleted?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiFormEntry;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * The `scratchPadId` returned in the response is for convenience only. In practice any valid Guid will work as long as the same Guid is used for all file uploads, and the final call to **PUT** `/formsapi/public/formentry/{entryId}`
     * @summary Locks a form entry for editing. Prevents in-application and other API calls from updating the form entry until the lock is completed, or expires. It will fail if there is an existing lock.
     * @param entryId Id of the entry to update
     * @param ignoreLock Set to true if you wish to ignore the lock on this form entry and get a new lock. Only applicable if the current user owns that lock.
     */
    publicFormentryEntryIdLockPost(entryId: number, ignoreLock?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.FormEntryLockInfo;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * `ApiFormEntryEditModel` requires the **formId** for the form.    **scratchPadId** should be a unique Guid. This can be used to pre-upload files and images associated with this form entry using the endpoint **POST** `/formsapi/public/files/{scratchPadId}`    **data** is a serialized string object containing the field data for the form entry submission. This is a true PUT call. So only those fields you want to update need be part of the request.  Any existing fields not in the request will not be updated. Please refer to our API developer documentation for details or contact [helpdesk@thoughtfarmer.com](mailto:helpdesk@thoughtfarmer.com).
     * @summary Edits an existing form entry.
     * @param entryId Id of the entry to update
     * @param entryLockId Optional lock id that would have been generated via /formsapi/public/formentry/{entryId}/lock. Lock is cleared upon successful update.
     * @param ignoreLock Set to true if you wish to ignore the lock on this form entry. Only applicable if the current user owns that lock.
     * @param apiFormEntryEditModel Data model for the form entry
     */
    publicFormentryEntryIdPut(entryId: number, entryLockId?: number, ignoreLock?: boolean, apiFormEntryEditModel?: models.ApiFormEntryEditModel, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiFormEntry;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * A user can be a reviewer only under the following conditions:  1. They are explicitly set as a reviewer in the form.  2. They have been added as an adhoc reviewer using the `addedReviewers` property of this request, or in the application for this specific form entry.  3. They are the manager of the submitter and this option has been enabled for the form.    You can simultaneously add an adhoc reviewer and assign them to the form in one call. For example,  ```  {      \"assigneeId\": 123,      \"addedReviewers\": [123]  }  ```    Valid status integers come from the response for the parent form via **GET** `/formsapi/public/form/{formId}`.
     * @summary Update the status, assignee and\\or the adhoc reviewers for a specific form entry.
     * @param entryId Id of the form entry.
     * @param apiFormEntryStatusChangeModel The data that will be used to make the changes for status and\\or reviewers
     */
    publicFormentryEntryIdStatusPost(entryId: number, apiFormEntryStatusChangeModel?: models.ApiFormEntryStatusChangeModel, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiFormEntry;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * Partial content may be returned if not all entryIds passed in are viewable or otherwise available.     **NOTE**: For fetching many entries you may get an error that the maximum allowable query string length has been exceeded. In that case use **POST** `/formsapi/public/formentries` with an array of entryIds in the body.
     * @summary Gets multiple form entries.
     * @param entryIds Comma separated list of form entry IDs.
     * @param includeDeleted Set to true to return even if the form entries have been deleted.
     */
    publicFormentryGet(entryIds?: string, includeDeleted?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: Array<models.ApiFormEntry>;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * `ApiFormEntryCreateModel` requires the **formId** for the form.    **scratchPadId** should be a unique Guid. This can be used to pre-upload files and images associated with this form entry using the endpoint **POST** `/formsapi/public/files/{scratchPadId}`    **startDate** is a valid DateTime in ISO8601 format. This will be compared with the time this request is received and used for reports on how long the form takes to fill out.   Be aware that this may skew reports for mixed API and user submitted forms.    **data** is a serialized string object containing the field data for the form entry submission. Please refer to our API developer documentation for details or contact  [helpdesk@thoughtfarmer.com](mailto:helpdesk@thoughtfarmer.com).
     * @summary Creates a new form entry.
     * @param apiFormEntryCreateModel
     */
    publicFormentryPost(apiFormEntryCreateModel?: models.ApiFormEntryCreateModel, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiFormEntry;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
}
