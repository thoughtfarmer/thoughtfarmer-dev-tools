/**
 * ThoughtFarmer FormFlow API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="jquery" />
import * as models from '../model/models';
import { Configuration } from '../configuration';
export declare class ApiFilesApi {
    protected basePath: string;
    defaultHeaders: Array<string>;
    defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings;
    configuration: Configuration;
    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings);
    private extendObj;
    /**
     * This endpoint should only be used as a cancel operation when **creating** a new form entry. For editing existing form entries the endpoint POST `/public/formentry/{entryId}/canceledit/{entryLockId}` should be used.
     * @summary Cleans up all files associated with a scratchPadId.
     * @param scratchPadId A unique GUID to identify the scratchpad used.
     */
    publicFilesScratchPadIdDelete(scratchPadId: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body?: any;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * This endpoint is just for convenience and testing. Typically you would just retain the `File` object as part of the upload file process.
     * @summary Gets all files currently associated with a specific scratchPadId.
     * @param scratchPadId A unique GUID to identify the scratchpad used.
     */
    publicFilesScratchPadIdGet(scratchPadId: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: Array<models.ApiFile>;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
    /**
     * **NOTE** All calls for the same edit or create on a form entry must use the same `scratchpadId` as the final create\\edit request.    There are 3 main uses for files added to a scratchpad.   1. Image form field  2. File form field  3. RTE images    For #1 and #2 the form entry data should looks like `{\"123\": 14 }`. Where \"123\" is the form field Id, and 14 is the `fileId` returned by this call.     For an RTE Image the embedded image tag should look something like the following:  ```  <img alt=\"image.png\" class=\"type-uploadimage\" data-photoid=\"14\" src=\"/formsapi/image/dddbbb6a-9d8b-4e6b-a835-0641483d7a2b/0x0/false/image.png\" />  ```    **data-photoid** comes from the `fileId` and the **src** comes from the `url` property from the response for this call. You can replace the 0x0 to specify a different thumbnail size. 0x0 is full size of the original image.
     * @summary Uploads a file to the scratchpad. Use this call for all files that must be added to a form entry.
     * @param scratchPadId A unique GUID to identify the scratchpad used for this edit\\create form entry operation.
     * @param formEntryId Optional parameter to be used when editing an existing form entry. Exclude for new form entries.
     * @param isRteImage Used to indicate that the file is an image to be used within RTE content. If false or not used the file should be for a form entry field type.
     */
    publicFilesScratchPadIdPost(scratchPadId: string, formEntryId?: number, isRteImage?: boolean, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<{
        response: JQueryXHR;
        body: models.ApiFile;
    }, {
        response: JQueryXHR;
        errorThrown: string;
    }>;
}
